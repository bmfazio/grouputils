usethis::use_gpl3_license()
devtools::check()
devtools::load_all(".")
set.seed(16)
sim_data(8, 13, 0.2)
set.seed(6)
sim_data(8, 13, 0.2)
devtools::document()
devtools::check()
importFrom("stats", "rbinom")
usethis::use_import_from("stats")
?rbinom
usethis::use_package("stats")
?sample
devtools::check()
devtools::load_all(".")
set.seed(6)
groupmake(sim_data(8, 13, 0.2), 2)
set.seed(6)
a <- groupmake(sim_data(8, 13, 0.2), 2)
apply(a,1,sum)
apply(a,2,sum)
sim_data(10, 25, 0.2)
sim_data(5, 10, 0.2)
a <- sim_data(5, 10, 0.2)
groupmake(a)
groupmake(a, 2)
a <- sim_data(5, 12, 0.2)
a
groupmake(a, 2)
max(letters)
usethis::use_testthat()
ls()
mtcars
for(i in mtcars)print(i)
for(i in matrix(1:9, nrow = 3))print(i)
usethis::use_test()
expand.grid(groups = 5:10,
people = seq(5, 40, 5),
size = 2:6)
conditions <- expand.grid(groups = 5:10,
people = seq(5, 40, 5),
size = 2:6,
choicefreq = c(0.1, 0.2, 0.5))
conditions
head(conditions)
head(conditions, 10)
apply(conditions, 1, print)
apply(conditions[1:3,], 1, print)
apply(conditions[1:3,], 1, \(g, n, s, p) groupmake(sim_data(g, n, p), s))
conditions[1:3,]
conditions[1:3,1]
conditions[1:3,2]
conditions <- expand.grid(groups = 5:10,
people = seq(5, 40, 5),
size = 2:6,
choicefreq = c(0.1, 0.2, 0.5))
conditions[1:3,2]
conditions[1, 1]
conditions[1, ]
conditions[1:3, ]
apply(conditions[1:3, ], 1, identity)
apply(conditions[1:3, ], 2, identity)
apply(conditions[1:3, ], 2, sum)
apply(conditions[1:3, ], 1, sum)
conditions[1:3, ]
apply(conditions[1:3, ], 1, c)
apply(conditions[1:3,], 1, \(g, n, s, p){groupmake(sim_data(g, n, p), s)})
apply(conditions[1:3, ], 1, c)conditions[1:3,]
conditions[1:3,]
sim_data
groupmake
conditions[1:3,]
apply(conditions[1:3,], 1, \(g, n, s, p){groupmake(sim_data(g, n, p), s)})
sim_data
debug(apply)
apply(conditions[1:3,], 1, \(g, n, s, p){groupmake(sim_data(g, n, p), s)})
FUN
FUN(5, 2, 1, 0.5)
FUN
simplify
dl
X
dl
X
d
dn
ds
d.call
d.ans
s.call
s.ans
.
dn.call
d2
ans
ans.list
l.ans
ans.names
apply(conditions[,], 1, \(g, n, s, p){groupmake(sim_data(g, n, p), s)})
devtools::load_all(".")
conditions <- expand.grid(groups = 5:10,
people = seq(5, 40, 5),
size = 2:6,
choicefreq = c(0.1, 0.2, 0.5))
apply(conditions[,], 1, \(g, n, s, p){groupmake(sim_data(g, n, p), s)})
apply(conditions[,], 1, \(g, s, p){groupmake(sim_data(g, n, p), s)})
apply(conditions[,], 1, \(g, s, p){groupmake(sim_data(g, p), s)})
sim_data
groupmake
conditions <- expand.grid(groups = 5:10,
people = seq(5, 40, 5),
size = 2:6,
choicefreq = c(0.1, 0.2, 0.5))
apply(conditions[1:3,], 1, \(x) groupmake(sim_data(x[1], x[2], x[4]), x[3]))
apply(conditions[1:3,], 1, \(x) {
apply(groupmake(sim_data(x[1], x[2], x[4]), x[3]), 2, sum)
})
apply(conditions[1:3,], 1, \(x) {
max(apply(groupmake(sim_data(x[1], x[2], x[4]), x[3]), 2, sum))
})
expect
?expect_less_than
apply(conditions[1:3,], 1, \(x) {
max(apply(groupmake(sim_data(x[1], x[2], x[4]), x[3]), 2, sum))
})
expect_lt(a, 10)
expect_lt(1, 10)
expect_lt(11, 10)
expect_lt(10, 10)
expect_lt(1:10, 10)
expect_lte
sapply(1:10, expect_lt, 10)
expect_lt(1:13, 10)
sapply(1:15, expect_lt, 10)
apply(conditions[1:3,], 1, \(x) {
max(apply(groupmake(sim_data(x[1], x[2], x[4]), x[3]), 2, sum))
})
apply(conditions[1:3,], 1, \(x) {
max(apply(groupmake(sim_data(x[1], x[2], x[4]), x[3]), 2, sum))
}) -> a
names(a)
?expect_equivalent
expectaa
a
expect_equal(a, c(1,1,1))
expect_equivalent(a, c(1,1,1))
expect_equal(a, c(1,1,1), ignore_attr = TRUE)
devtools::test()
conditions
head(conditions)
rep(head(conditions), 2)
conditions
a <- conditions[1:6,]
a
a[1:nrow(a),]
a[rep(1:nrow(a), each = 3),]
devtools::test()
devtools::check()
devtools::document()
?groupmake
devtools::document()
?groupmake
